version: 2.1

parameters:
  working_directory:
    description: "The working directory for building the app."
    type: string
    default: "~/app"
  aws_account_id:
    description: "The AWS account ID."
    type: string
    default: "883127560329"
  aws_profile:
    description: "The VGS profile for accessing AWS to find the S3 buckets with Maven artifacts."
    type: string
    default: "dev/vault"
  aws_region:
    description: "The AWS region where the S3 buckets with Maven artifacts are."
    type: string
    default: "us-west-2"
  test_results_dir:
    description: "The directory to put test results into."
    type: string
    default: "/tmp/test-results"

commands: 
  setup_env:
    description: "Set up AWS access"
    steps:
      - run:
          name: "Setup AWS access"
          command: "./.circleci/setup-aws-config.sh"

jobs:
  configure-aws:
    machine: {}
    steps:
      - run:
          name: "Create AWS configuration directory."
          command: "mkdir -p ~/.aws"
      - run:
          name: "Generate AWS configuration."
          command: |
            #!/usr/bin/env bash
            echo "
            [default]
            region = << pipeline.parameters.aws_region >>
            aws_access_key_id = $AWS_ACCESS_KEY_ID
            aws_secret_access_key = $AWS_SECRET_ACCESS_KEY

            [<< pipeline.parameters.aws_profile >>]
            region = << pipeline.parameters.aws_region >>
            role_arn = arn:aws:iam::<< pipeline.parameters.aws_account_id >>:role/VGSStageDeploy
            source_profile = default
            " >> ~/.aws/credentials
  configure-maven:
    machine: {}
    steps:
      - run:
          name: "Create Maven configuration directory."
          command: "mkdir -p ~/.m2"
      - run:
          name: "Generate Maven settings."
          command: |
            #!/usr/bin/env bash
            echo "
            <?xml version=\"1.0\" encoding=\"UTF-8\"?>
            <settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"
                xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
                xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">
              <interactiveMode>false</interactiveMode>
              <proxies></proxies>
              <servers>
                <server>
                  <id>verygood-release-repo</id>
                  <!-- Bash will substitute in the environment variable values when echoing. -->
                  <username>$AWS_ACCESS_KEY_ID</username>
                  <password>$AWS_SECRET_ACCESS_KEY</password>
                </server>
                <server>
                  <id>verygood-snapshot-repo</id>
                  <username>$AWS_ACCESS_KEY_ID</username>
                  <password>$AWS_SECRET_ACCESS_KEY</password>
                </server>
                <server>
                  <id>artifactory-central</id>
                  <username>$ARTIFACTORY_USERNAME</username>
                  <password>$ARTIFACTORY_PASSWORD</password>
                </server>
                <server>
                  <id>artifactory-jcenter</id>
                  <username>$ARTIFACTORY_USERNAME</username>
                  <password>$ARTIFACTORY_PASSWORD</password>
                </server>
                <server>
                  <id>artifactory-release</id>
                  <username>$ARTIFACTORY_USERNAME</username>
                  <password>$ARTIFACTORY_PASSWORD</password>
                </server>
                <server>
                  <id>artifactory-snapshot</id>
                  <username>$ARTIFACTORY_USERNAME</username>
                  <password>$ARTIFACTORY_PASSWORD</password>
                </server>
              </servers>
              <mirrors>
                <mirror>
                  <mirrorOf>central</mirrorOf>
                  <id>artifactory-central</id>
                  <url>https://vgs.jfrog.io/artifactory/central/</url>
                </mirror>
                <mirror>
                  <mirrorOf>jcenter</mirrorOf>
                  <id>artifactory-jcenter</id>
                  <url>https://vgs.jfrog.io/artifactory/jcenter/</url>
                </mirror>
              </mirrors>
              <activeProfiles>
                <activeProfile>very-good-security</activeProfile>
              </activeProfiles>
              <profiles>
                <profile>
                  <id>very-good-security</id>
                  <activation>
                    <activeByDefault>false</activeByDefault>
                  </activation>
                  <repositories>
                    <repository>
                      <id>verygood-release-repo</id>
                      <name>Very Good Release Repository</name>
                      <url>s3://vault-dev-01-audits-01-artifact-19k6160zpr44j/software/release/</url>
                      <releases>
                        <enabled>true</enabled>
                      </releases>
                      <snapshots>
                        <enabled>false</enabled>
                      </snapshots>
                    </repository>
                    <repository>
                      <id>verygood-snapshot-repo</id>
                      <name>Very Good Snapshot Repository</name>
                      <url>s3://vault-dev-01-audits-01-artifact-19k6160zpr44j/software/snapshot/</url>
                      <releases>
                        <enabled>false</enabled>
                      </releases>
                      <snapshots>
                        <enabled>true</enabled>
                      </snapshots>
                    </repository>
                    <repository>
                      <id>artifactory-release</id>
                      <name>VGS Artifactory Releases</name>
                      <url>https://vgs.jfrog.io/artifactory/libs-release/</url>
                      <releases>
                        <enabled>true</enabled>
                      </releases>
                      <snapshots>
                        <enabled>false</enabled>
                      </snapshots>
                    </repository>
                    <repository>
                      <id>artifactory-snapshot</id>
                      <name>VGS Artifactory Snapshots</name>
                      <url>https://vgs.jfrog.io/artifactory/libs-snapshot/</url>
                      <releases>
                        <enabled>false</enabled>
                      </releases>
                      <snapshots>
                        <enabled>true</enabled>
                      </snapshots>
                    </repository>
                  </repositories>
                  <pluginRepositories>
                    <pluginRepository>
                      <id>bintray-vg-vgs-oss-plugins</id>
                      <url>https://dl.bintray.com/vg/vgs-oss</url>
                      <snapshots>
                        <enabled>true</enabled>
                      </snapshots>
                    </pluginRepository>
                  </pluginRepositories>
                </profile>
              </profiles>
            </settings>
            " > ~/.m2/settings.xml
  build-test:
    machine: true
    working_directory: << pipeline.parameters.working_directory >>
    environment:
      TEST_RESULTS: << pipeline.parameters.test_results_dir >>
    steps:
      - checkout
      - restore_cache:
          key: track-{{ checksum "pom.xml" }}
      - setup_env
      - run: VERSION=$CIRCLE_SHA1 docker-compose run build-test
      - save_cache:
          key: track-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
      - persist_to_workspace:
          root: .
          paths: "*"

  deploy-snapshot:
    machine:
      enabled: true
    working_directory: << pipeline.parameters.working_directory >>
    environment:
      - TEST_RESULTS: << pipeline.parameters.test_results_dir >>
      - AWS_DEFAULT_REGION: << pipeline.parameters.aws_region >>
      - AWS_REGION: << pipeline.parameters.aws_region >>
      - AWS_ACCOUNT_ID: << pipeline.parameters.aws_account_id >>
      - AWS_PROFILE: << pipeline.parameters.aws_profile >>
    steps:
      - attach_workspace:
          at: << pipeline.parameters.working_directory >>
      - setup_env
      - run:
          name: Deploy snapshot
          command: |
            unset AWS_ACCESS_KEY_ID
            unset AWS_SECRET_ACCESS_KEY
            docker-compose run deploy-snapshot

  deploy-release:
    machine:
      enabled: true
    working_directory: << pipeline.parameters.working_directory >>
    environment:
      - TEST_RESULTS: << pipeline.parameters.test_results_dir >>
      - AWS_DEFAULT_REGION: << pipeline.parameters.aws_region >>
      - AWS_REGION: << pipeline.parameters.aws_region >>
      - AWS_ACCOUNT_ID: << pipeline.parameters.aws_account_id >>
      - AWS_PROFILE: << pipeline.parameters.aws_profile >>
    steps:
      - attach_workspace:
          at: << pipeline.parameters.working_directory >>
      - setup_env
      - add_ssh_keys:
          fingerprints:
            - "41:9b:7b:a7:32:3e:c4:da:69:4e:c6:64:9a:5a:12:78"
      - run:
          name: Deploy release
          command: |
            unset AWS_ACCESS_KEY_ID
            unset AWS_SECRET_ACCESS_KEY
            git config user.name "circleci"
            git config user.email "dev@vgs.io"
            docker-compose run deploy-release
            git push origin master

  validate-production:
    working_directory: << pipeline.parameters.working_directory >>
    environment:
      - TEST_RESULTS: << pipeline.parameters.test_results_dir >>
      - AWS_DEFAULT_REGION: << pipeline.parameters.aws_region >>
      - AWS_REGION: << pipeline.parameters.aws_region >>
      - AWS_ACCOUNT_ID: << pipeline.parameters.aws_account_id >>
      - AWS_PROFILE: << pipeline.parameters.aws_profile >>
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - run:
          name: Validate a production build
          command: |
            docker login -u="$QUAY_DOCKER_LOGIN" -p="$QUAY_DOCKER_LOGIN_PASSWORD" quay.io
            docker run -e GITHUB_API_TOKEN=$GITHUB_API_TOKEN quay.io/verygoodsecurity/ghch:$GHCH_VERSION validate --repo-name verygoodsecurity/$CIRCLE_PROJECT_REPONAME --tag-name $CIRCLE_TAG --tag-regex "(.*)"

  complete-production:
    working_directory: << pipeline.parameters.working_directory >>
    environment:
      - TEST_RESULTS: << pipeline.parameters.test_results_dir >>
      - AWS_DEFAULT_REGION: << pipeline.parameters.aws_region >>
      - AWS_REGION: << pipeline.parameters.aws_region >>
      - AWS_ACCOUNT_ID: << pipeline.parameters.aws_account_id >>
      - AWS_PROFILE: << pipeline.parameters.aws_profile >>
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - run:
          name: Complete a production build
          command: |
            docker login -u="$QUAY_DOCKER_LOGIN" -p="$QUAY_DOCKER_LOGIN_PASSWORD" quay.io
            docker run -e GITHUB_API_TOKEN=$GITHUB_API_TOKEN -e CLUBHOUSE_API_TOKEN=$CLUBHOUSE_API_TOKEN quay.io/verygoodsecurity/ghch:$GHCH_VERSION complete --repo-name verygoodsecurity/$CIRCLE_PROJECT_REPONAME --tag-name $CIRCLE_TAG --tag-regex "(.*)"

workflows:
  build-test-and-deploy:
    jobs:
      - configure-maven:
          context:
            - "artifact-publisher"
            - "artifactory"
      - build-test:
          context: artifact-publisher
          requires:
            - "configure-maven"
          filters:
            tags:
              only: /.*/
      - deploy-snapshot:
          context: artifact-publisher
          requires:
            - "configure-maven"
            - build-test
          filters:
            branches:
              only: master
      - deploy-release:
          context: artifact-publisher
          requires:
            - "configure-maven"
            - build-test
            - validate-production
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - validate-production:
          context: ghch
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(?:-\w+){0,1}$/
            branches:
              ignore: /.*/
      - complete-production:
          context: ghch
          requires:
            - deploy-release
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(?:-\w+){0,1}$/
            branches:
              ignore: /.*/
